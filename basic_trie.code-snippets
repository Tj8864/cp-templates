{
    "Basic trie": {
        "prefix": "basictrie",
        "body": [
            "struct trieNode{",
            "    char ch;",
            "    int ending;",
            "    map<char, trieNode*> pointers;",
            "    trieNode* parent;",
            "    trieNode(){",
            "        ch = '\\0';",
            "        ending = 0;",
            "        pointers.clear();",
            "        parent = nullptr;",
            "    }",
            "};",
            "",
            "class trie{",
            "    public:",
            "    trieNode *root;",
            "    trie()",
            "    {",
            "        root = new trieNode;",
            "        root->ending = 0;",
            "        root->ch = '\\0';",
            "        root->parent = nullptr;",
            "    }",
            "    int count(string s){",
            "        trieNode *ptr = root;",
            "        int p = 0;",
            "        while(p < s.size() and ptr->pointers.find(s[p])!=ptr->pointers.end()){",
            "            ptr = ptr->pointers[s[p]];",
            "            p++;",
            "        }",
            "        if(p < s.size()) return 0;",
            "        else return ptr->ending;",
            "    }",
            "    void insert(string s){",
            "        trieNode *ptr = root;",
            "        for(int i=0;i<s.size();i++){",
            "            if(ptr->pointers.find(s[i]) == ptr->pointers.end())",
            "                ptr->pointers[s[i]] = new trieNode,",
            "                ptr->pointers[s[i]]->ch = s[i];",
            "                ptr->pointers[s[i]]->parent = ptr;",
            "                ptr = ptr->pointers[s[i]];",
            "        }",
            "        ptr->ending++;",
            "    }",
            "",
            "    void remove(string s){",
            "        if(count(s) == 0) return;",
            "        trieNode *ptr = root;",
            "        for(char c:s){",
            "            ptr = ptr->pointers[c];",
            "        }",
            "        ptr->ending--;",
            "        while(ptr->parent != nullptr){",
            "            char c;",
            "            if(ptr->pointers.empty() and ptr->ending == 0){",
            "                c = ptr->ch;",
            "                ptr = ptr->parent;",
            "                delete ptr->pointers[c];",
            "                ptr->pointers[c] = nullptr;",
            "                ptr->pointers.erase(c);",
            "            }",
            "            else break;",
            "        }",
            "    }",
            "};",
            ""
        ],
        "description": "Basic implementation of Trie"
    }
}