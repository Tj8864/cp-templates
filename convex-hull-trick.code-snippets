{
    "cht": {
        "prefix": "cht",
        "body": [
            "const double inf = 100000000000000.0;",
            "",
            "template<typename T>",
            "struct Line {",
            "    T m,c;",
            "    Line() {",
            "        m = c = 0;",
            "    }",
            "    Line(T m, T c) {",
            "        this->m = m;",
            "        this->c = c;",
            "    }",
            "    auto at(auto x) {",
            "        return m*x + c;",
            "    }",
            "};",
            "",
            "template<typename T, typename U> ",
            "double intersection(Line<T> l1, Line<U> l2) {",
            "    return double(l2.c - l1.c)/double(l1.m - l2.m);",
            "}",
            "",
            "struct Interval {",
            "    double start,end;",
            "    Interval(){",
            "        start = end = 0;",
            "    }",
            "    Interval(double s, double e) {",
            "        start = s, end = e;",
            "    }",
            "};",
            "",
            "template<typename T>",
            "struct Convex_Hull {",
            "    vector<Line<T>> lines;",
            "    vector<Interval> bounds;",
            "    Convex_Hull() {}",
            "",
            "    T at(T point) {",
            "        int index = lower_bound(bounds.begin(), bounds.end(), point, [](Interval i, T point) {",
            "            return i.end < point;",
            "        })-bounds.begin();",
            "        return lines[index].m*point + lines[index].c;",
            "    }",
            "",
            "    void addLine(Line<T> l) {",
            "        while(!lines.empty()) {",
            "            Line<T> line = lines.back();",
            "            if(line.at(bounds.back().start) >= l.at(bounds.back().start)) {",
            "                lines.pop_back();",
            "                bounds.pop_back();",
            "            }",
            "            else break;",
            "        }",
            "",
            "        if(lines.empty()) {",
            "            lines.push_back(l);",
            "            bounds.push_back(Interval(0,inf));",
            "        } ",
            "        else {",
            "            double new_start = intersection(l, lines.back());",
            "            bounds.back().end = new_start;",
            "            lines.push_back(l);",
            "            bounds.push_back(Interval(new_start,inf));",
            "        }",
            "    }",
            "};",
            "",
            "template<typename T>",
            "using CH = Convex_Hull<T>;"
        ],
        "description": "cht"
    }
}