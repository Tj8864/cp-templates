{
    "matrix": {
        "prefix": "matrix",
        "body": [
            "template<long long modulo>",
            "struct matrix{",
            "\tvector<vector<long long>> mat;",
            "\tint row, col;",
            "\tmatrix(long long _row, long long _col){",
            "\t\trow = _row, col = _col;",
            "\t\tmat.assign(row, vector<long long>(col,0));",
            "\t}",
            "\tvector<long long> &operator[](long long r){",
            "\t\tif(r >= mat.size()) throw;",
            "\t\treturn mat[r];",
            "\t}",
            "",
            "\tmatrix operator*(matrix &m){",
            "\t\tif(m.row != this->col){",
            "\t\t\tthrow;",
            "\t\t}",
            "\t\tmatrix res(this->row, m.col);",
            "\t\tfor(int i=0;i<this->row;i++){",
            "\t\t\tfor(int j=0;j<m.col;j++){",
            "\t\t\t\tfor(int k=0;k<m.row;k++){",
            "\t\t\t\t\tres[i][j] = (res[i][j] + (((*this)[i][k])*m[k][j])%modulo)%modulo;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "",
            "\tvector<vector<long long>>::iterator begin(){",
            "\t\treturn mat.begin();",
            "\t}",
            "",
            "\tvector<vector<long long>>::iterator end(){",
            "\t\treturn mat.end();",
            "\t}",
            "",
            "\tvoid operator=(matrix m){",
            "\t\tthis->mat = m.mat;",
            "\t\tthis->row = m.row;",
            "\t\tthis->col = m.col;",
            "\t}",
            "};",
            "",
            "template<long long modulo>",
            "matrix<modulo> identity(int sz){",
            "\tmatrix<modulo> res(sz,sz);",
            "\tfor(int i=0;i<sz;i++){",
            "\t\tres[i][i] = 1;",
            "\t}",
            "\treturn res;",
            "}",
            "",
            "template<long long modulo> ostream &operator<<(ostream &ost, matrix<modulo> m){for(auto &i:m){for(auto &j:i) ost << j << \" \";ost << endl;}return ost;}",
            "template<long long modulo> istream &operator>>(istream &ist, matrix<modulo> &m){for(auto &i:m)for(auto &j:i) ist>>j;return ist;}",
            "",
            "",
            "template<long long modulo>",
            "matrix<modulo> matrixExpo(matrix<modulo> &m, long long power){",
            "\tif(m.row != m.col) throw;",
            "\tmatrix<modulo> res = identity<modulo>(m.row);",
            "\tauto prod = m;",
            "\twhile(power){",
            "\t\tif((power&1)) res = res*prod;",
            "\t\tprod = (prod*prod);",
            "\t\tpower /= 2;",
            "\t}",
            "\treturn res;",
            "}",
            ""
        ],
        "description": "matrix"
    },
    "doublematrix": {
        "prefix": "doublematrix",
        "body": [
            "",
            "struct matrix{",
            "\tvector<vector<double>> mat;",
            "\tint row, col;",
            "\tmatrix(long long _row, long long _col){",
            "\t\trow = _row, col = _col;",
            "\t\tmat.assign(row, vector<double>(col,0));",
            "\t}",
            "\tvector<double> &operator[](long long r){",
            "\t\tif(r >= mat.size()) throw;",
            "\t\treturn mat[r];",
            "\t}",
            "",
            "\tmatrix operator*(matrix &m){",
            "\t\tif(m.row != this->col){",
            "\t\t\tthrow;",
            "\t\t}",
            "\t\tmatrix res(this->row, m.col);",
            "\t\tfor(int i=0;i<this->row;i++){",
            "\t\t\tfor(int j=0;j<m.col;j++){",
            "\t\t\t\tfor(int k=0;k<m.row;k++){",
            "\t\t\t\t\tres[i][j] += (((*this)[i][k])*m[k][j]);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "",
            "\tvector<vector<double>>::iterator begin(){",
            "\t\treturn mat.begin();",
            "\t}",
            "",
            "\tvector<vector<double>>::iterator end(){",
            "\t\treturn mat.end();",
            "\t}",
            "",
            "\tvoid operator=(matrix m){",
            "\t\tthis->mat = m.mat;",
            "\t\tthis->row = m.row;",
            "\t\tthis->col = m.col;",
            "\t}",
            "};",
            "",
            "matrix identity(int sz){",
            "\tmatrix res(sz,sz);",
            "\tfor(int i=0;i<sz;i++){",
            "\t\tres[i][i] = 1;",
            "\t}",
            "\treturn res;",
            "}",
            "ostream &operator<<(ostream &ost, matrix m){for(auto &i:m){for(auto &j:i) ost << j << \" \";ost << endl;}return ost;}",
            "istream &operator>>(istream &ist, matrix &m){for(auto &i:m)for(auto &j:i) ist>>j;return ist;}",
            "",
            "",
            "matrix matrixExpo(matrix &m, long long power){",
            "\tif(m.row != m.col) throw;",
            "\tmatrix res = identity(m.row);",
            "\tauto prod = m;",
            "\twhile(power){",
            "\t\tif((power&1)) res = res*prod;",
            "\t\tprod = (prod*prod);",
            "\t\tpower /= 2;",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "doublematrix"
    }
}