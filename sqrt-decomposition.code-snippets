{
    "Mo's algo": {
        "prefix": "sqrtdecomp",
        "body": [
            "struct query{",
            "    ii range;",
            "    int order;",
            "    query(){}",
            "};",
            "",
            "",
            "void solve()",
            "{",
            "    int n,q;",
            "    cin >> n >> q;",
            "    vi v(n);",
            "    cin >> v;",
            "    int blocksize = 0;",
            "    while(blocksize*blocksize <= n) blocksize++;",
            "    blocksize--;",
            "    vector<query> qs(q);",
            "    rep(i,0,q) cin >> qs[i].range,qs[i].range.first--,qs[i].range.second--, qs[i].order = i;",
            "    sort(all(qs),[&blocksize](query a, query b){",
            "        if(a.range.first/blocksize == b.range.first/blocksize) return a.range.second < b.range.second;",
            "        return a.range.first/blocksize < b.range.first/blocksize;",
            "    });",
            "    int l=qs[0].range.first, r=qs[0].range.first;",
            "    int ans;",
            "    vi answers(q);",
            "    rep(i,0,q){",
            "        if(i == 0 or qs[i].range.first/blocksize != qs[i-1].range.first/blocksize){",
            "            l = r = qs[i].range.first;",
            "        }",
            "        while(r < qs[i].range.second){",
            "            r++;",
            "        }",
            "        if(l < qs[i].range.first){",
            "            while(l != qs[i].range.first){",
            "                l++;",
            "            }",
            "        }",
            "        else if(l > qs[i].range.first){",
            "            while(l != qs[i].range.first){",
            "                l--;",
            "            }",
            "        }",
            "        answers[qs[i].order] = ans;",
            "    }",
            "    for(auto i:answers) cout << i << endl;",
            "}"
        ],
        "description": "Mo's algo "
    }
}