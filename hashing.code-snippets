{
    "hashing": {
        "prefix": "hashing",
        "body": [
            "constexpr int largeprimes[] = {1000000007,1000000009,1000000021,1000000033,1000000087,1000000093,1000000097,1000000103,1000000123,1000000181,1000000207,1000000223,1000000241};",
            "template<const int mod1, const int mod2, const int base = 31>",
            "struct Hash{",
            "    private:",
            "    long long baseInverse1, baseInverse2;",
            "    long long lenPow1, lenPow2;",
            "    public:",
            "    long long hash1, hash2;",
            "    int length;",
            "    Hash(string s){",
            "        baseInverse1 = binPow(base,mod1-2,mod1);",
            "        baseInverse2 = binPow(base,mod2-2,mod2);",
            "        hash1 = hash2 = length = 0;",
            "        for(auto i:s){",
            "            hash1 *= (base);",
            "            hash2 *= (base);",
            "            hash1 += (i-'a'+1);",
            "            hash2 += (i-'a'+1);",
            "            hash1 %= mod1;",
            "            hash2 %= mod2;",
            "            length++;",
            "        }",
            "        lenPow1 = binPow(base,length,mod1);",
            "        lenPow2 = binPow(base,length,mod2);",
            "    }",
            "    Hash(){",
            "        baseInverse1 = binPow(base,mod1-2,mod1);",
            "        baseInverse2 = binPow(base,mod2-2,mod2);",
            "        lenPow1 = lenPow2 = 1;",
            "        hash1 = hash2 = length = 0;",
            "    }",
            "    bool operator==(const Hash h){",
            "        return (this->hash1==h.hash1 and this->hash2==h.hash2 and this->length == h.length);",
            "    }",
            "    void push_back(char c){",
            "        hash1 *= (base);",
            "        hash2 *= (base);",
            "        hash1 += (c-'a'+1);",
            "        hash2 += (c-'a'+1);",
            "        hash1 %= mod1;",
            "        hash2 %= mod2;",
            "        lenPow1 = (lenPow1*base)%mod1;",
            "        lenPow2 = (lenPow2*base)%mod2;",
            "        length++;",
            "    }",
            "    void push_front(char c){",
            "        hash1 += (c-'a'+1)*lenPow1;",
            "        hash1 %= mod1;",
            "        hash2 += (c-'a'+1)*lenPow2;",
            "        hash2 %= mod2;",
            "        lenPow1 = (lenPow1*base)%mod1;",
            "        lenPow2 = (lenPow2*base)%mod2;",
            "        length++;",
            "    }",
            "    void pop_back(char c){",
            "        hash1 -= (c-'a'+1);",
            "        hash1 *= baseInverse1;",
            "        hash1 %= mod1;",
            "        hash2 -= (c-'a'+1);",
            "        hash2 *= baseInverse2;",
            "        hash2 %= mod2;",
            "        lenPow1 = (lenPow1*baseInverse1)%mod1;",
            "        lenPow2 = (lenPow2*baseInverse2)%mod2;",
            "        length--;",
            "    }",
            "    void pop_front(char c){",
            "        lenPow1 = (lenPow1*baseInverse1)%mod1;",
            "        lenPow2 = (lenPow2*baseInverse2)%mod2;",
            "        hash1 -= ((c-'a'+1)*lenPow1)%mod1;",
            "        hash1 %= mod1;",
            "        hash1 += mod1;",
            "        hash1 %= mod1;",
            "        hash2 -= ((c-'a'+1)*lenPow2)%mod2;",
            "        hash2 %= mod2;",
            "        hash2 += mod2;",
            "        hash2 %= mod2;",
            "        length--;",
            "    }",
            "};",
            "",
            "template<const int m1, const int m2>",
            "ostream &operator<<(ostream &ost, Hash<m1,m2> h){",
            "    ost << \"{\" << h.hash1 << \", \" << h.hash2 << \"}\\n\";",
            "    return ost;",
            "}",
            "",
            "template<const int m1, const int m2>",
            "bool operator<(Hash<m1,m2> h1, Hash<m1,m2> h2){",
            "    return make_pair(h1.hash1, make_pair(h1.hash2,h1.length)) < make_pair(h2.hash1, make_pair(h2.hash2,h2.length));",
            "}",
            ""
        ],
        "description": "hashing"
    }
}